<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <title>Session running</title>
  <script src="/bower_components/webrtc-adapter/adapter.js"></script>
  <script src="/js/RTCAbstraction.js"></script>
  <style>
    video {
      /* flip video horizontally */
      transform: scale(-1,1);
    }
  </style>
</head>
<body>
  <video id="localVideo" autoplay>Video stream not available.</video>
  <video id="remoteVideo" autoplay>Video stream not available.</video>
  <script>
    // == Step 0: define error handler == //
    errorHandler = function(trace) {
      return function(msg) {
        console.log("could not " + trace + ": " + msg);
      }
    };

    var rtcSessions = [];
    (function() {
      // == Step 1: setup local video stream == //
      navigator.getUserMedia({audio: false, video: true}, function(stream) {
        var video = document.getElementById("localVideo");
        video.src = window.URL.createObjectURL(stream);

        video.onloadedmetadata = function(e) {
          video.play();
        };

        // == Step 2: establish 2-way signaling channel to server == //
        var socket = new WebSocket("ws://localhost:4567/session/<%= @id %>");
        socket.onopen = function (event) {
          console.log("websocket established");
        };
        socket.onmessage = function (event) {
          console.log(event.data);
          var msg = JSON.parse(event.data);
          switch(msg.type) {
            case 'MsgPing':
              // pong
              break;
            case 'MsgNewUser':
              if(msg.users_count >= 1) {
                // send offer
                var rtcConnection = new RTCAbstraction();
                rtcConnection.addStream(stream);
                rtcConnection.createOffer(function(offer) {
                  var msg = JSON.stringify({
                    // TODO: add uuid for offers
                    'type': 'MsgOffer',
                    'offer': offer
                  });
                  console.log(msg);
                  socket.send(msg);
                });
                rtcSessions.push(rtcConnection);
              } else {
                // first one!
                // alone :( wait for offer
              }
              break;
            case 'MsgOffer':

            default:
              errorHandler("socket.onMessage")("no such message type: " + msg.type);
              break;
          }
        };
      }, errorHandler("getUserMedia"));
    })();
  </script>
</body>
