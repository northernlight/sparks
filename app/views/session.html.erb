<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <title>Session running</title>
  <script src="/bower_components/webrtc-adapter/adapter.js"></script>
  <style>
    video {
      transform: scale(-1,1);
    }
  </style>
</head>
<body>
  <video id="localVideo" autoplay>Video stream not available.</video>
  <video id="remoteVideo" autoplay>Video stream not available.</video>
  <script>
    // === define error handler ===
    errorHandler = function(trace) {
      return function(msg) {
        trace("could not " + trace + ": " + msg);
        console.log("could not " + trace + ": " + msg);
      }
    };

    (function() {
      var peerConnection = new RTCPeerConnection();

      peerConnection.onaddstream = function(obj) {
        console.log("onaddstream()");
        var vid = document.getElementById("remoteVideo");
        vid.src = URL.createObjectURL(obj.stream);
        vid.onloadedmetadata = function(e) {
          vid.play();
        };
      }

      // == Step 1: setup local video stream == //
      navigator.getUserMedia({audio: false, video: true}, function(stream) {
        var video = document.getElementById("localVideo");
        video.src = window.URL.createObjectURL(stream);
        peerConnection.addStream(stream);

        video.onloadedmetadata = function(e) {
          video.play();
        };

        // == Step 2: on client join => create offer to client == //
        var socket = new WebSocket("ws://localhost:4567/session/<%= @id %>");
        socket.onopen = function (event) {
          console.log("websocket established");
        };
        socket.onmessage = function (event) {
          console.log(event.data);
        };

        /*
          peerConnection.onicecandidate = function(event) {
            if (event.candidate) {
              console.log('Local ICE candidate: \n' + event.candidate);
              // signal ice information to server
              var request = new XMLHttpRequest();
              request.open("POST", '/stream/answer/<%= @id %>', false);
              request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
              request.send(JSON.stringify({'candidate': event.candidate}));
            }
          }

          if(streamOffered) return;
          peerConnection.createOffer(function(offer) {
            streamOffered = true;
            var sessionDescription = new RTCSessionDescription(offer);
            peerConnection.setLocalDescription(sessionDescription, function() {
              // signal session information to server
              var request = new XMLHttpRequest();
              request.open("POST", '/stream/offer/<%= @id %>', false);
              request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
              request.send(JSON.stringify(sessionDescription.toJSON()));
            }, errorHandler("setLocalDescription"));
          }, errorHandler("createOffer"));
        });

        source.addEventListener('offer', function(evt) {
          var signal = JSON.parse(evt.data);
          if (signal.sdp) {
            // NO, U MAKE ME A SANDWICH.
            if (!streamOffered) {
              peerConnection.setRemoteDescription(new RTCSessionDescription(signal), function() {
                console.log('offer: got remote description');
                peerConnection.createAnswer(function(answer) {
                  answerSent = true;
                  sessionDescription = new RTCSessionDescription(answer);
                  peerConnection.setLocalDescription(sessionDescription, function() {
                    // send the answer to a server to be forwarded back to the caller (you)
                    var request = new XMLHttpRequest();
                    request.open("POST", '/stream/answer/<%= @id %>', false);
                    request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
                    request.send(JSON.stringify({'sdp': sessionDescription}));
                  }, errorHandler("setLocalDescription"));
                }, errorHandler("createAnswer"));
              }, errorHandler("setRemoteDescription"));
            }
          } else {
            peerConnection.addIceCandidate(new RTCIceCandidate(signal.candidate));
          }
        });

        source.addEventListener('answer', function(evt) {
          // sweet, we have an answer => handshake complete
          var signal = JSON.parse(evt.data);
          if (signal.sdp) {
            // â€¦ wasn't me, right?
            if (!answerSent) {
              peerConnection.setRemoteDescription(new RTCSessionDescription(signal.sdp), function() {
                console.log('answer: remote connection established');
              }, errorHandler("setRemoteDescription"));
            }
          }
          else {
            peerConnection.addIceCandidate(new RTCIceCandidate(signal.candidate));
          }
        });
        */
      }, errorHandler("getUserMedia"));
    })();
  </script>
</body>
